import "tfplan/v2" as tfplan

// Sentinel filter expression used to filter out all aws_s3_bucket resources 
// that will change once the Terraform plan has been applied.
aws_s3_buckets = filter tfplan.resource_changes as _, resource_changes {
    resource_changes.type is "aws_s3_bucket" and
        resource_changes.mode is "managed" and
        (resource_changes.change.actions contains "create" or
            resource_changes.change.actions is ["update"])
}

// Sentinel rule used to evaluate the configuration of all filtered aws_s3_bucket resources. 

#aws_s3_bucket_acl_is_private = rule {
 #   all aws_s3_buckets as _, aws_s3_bucket {
 #       aws_s3_bucket.change.after.acl is "private"
 #   }
#}
# Get S3 bucket with cloudtrail
#trailS3Buckets = tfplan.find_resources("aws_s3_bucket.trailbucket")


aws_cloudtrail_enabled_logging_3_1 = rule{
    all aws_cloudtrail as _, aws_cloudtrail {
        aws_cloudtrail.change.after.enable_logging is "true" and 
        aws_cloudtrail.change.after.is_multi_region_trail is "true" and
        aws_cloudtrail.change.after.event_selector.include_management_events is "true"
        aws_cloudtrail.change.after.event_selector.read_write_type is "All"
    }
}
#aws_cloudtrail_enabled_allregions = rule{
#    all aws_cloudtrail as _, aws_cloudtrail {
#       aws_cloudtrail.change.after.is_multi_region_trail is "true"
#   }
#}

aws_cloudtrail_logfile_validation_3_2 = rule{
    all aws_cloudtrail as _, aws_cloudtrail {
        aws_cloudtrail.change.after.enable_log_file_validation is "true"
    }
}

# This needs rework
aws_cloudtrail_S3bucket_privateaccess_3_3 = rule{
    all aws_s3_bucket as _, aws_s3_bucket {
        aws_s3_bucket.trailbucket.change.after.acl is "private"
    }
}
#Pending Ensure the LatestcloudwatchLogdDeliveryTime property is set to a recent (~one day old) timestamp
aws_cloudtrail_cloudwatchlogs_3_4 = rule{
    all aws_cloudtrail as _, aws_cloudtrail {
        aws_cloudtrail.change.after.cloud_watch_logs_group_arn is not "null"
        #aws_cloudtrail.change.after.event_selector.data_resource.values matches "aws:s3"
    }
}

aws_config_recording_allregions_3_5 = rule{
    #all aws_cloudtrail as _, aws_cloudtrail {
    #    aws_s3_bucket.change.after.cloud_watch_logs_group_arn is not "null"
    #}
}

aws_bucket_logging_3_6 = rule{
    all aws_s3_bucket as _, aws_s3_bucket {
        aws_s3_bucket.change.after.enable_logging is true
    }
}

aws_cloudtrail_encryption_3_7 = rule{
    all aws_s3_bucket as _, aws_s3_bucket {
    aws_s3_bucket.trailbucket.server_side_encryption_configuration.0.rule.0.apply_server_side_encryption_by_default.0.sse_algorithm is "aws:kms"
    }
}

aws_CMK_key_rotation_3_8 = rule{
    all aws_kms_key as _, aws_kms_key {
        aws_kms_key.change.after.enable_key_rotation is true
    }
}

aws_VPC_3_9 = rule{
    
    }
}

aws_objectlevel_logging_s3_write_3_9 = rule{
    all aws_s3_bucket as _, aws_s3_bucket {
        aws_s3_bucket.change.after.enable_key_rotation is true
    }
}

aws_objectlevel_logging_s3_read_3_10 = rule{
    all aws_s3_bucket as _, aws_s3_bucket {
        aws_s3_bucket.change.after.enable_key_rotation is true
    }
}

main = rule {
    aws_cloudtrail_enabled
}