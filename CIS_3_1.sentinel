import "tfplan/v2" as tfplan

aws_s3_buckets = filter tfplan.resource_changes as _, resource_changes {
    resource_changes.type is "aws_s3_bucket" and
        resource_changes.mode is "managed" and
        (resource_changes.change.actions contains "create" or
            resource_changes.change.actions is ["update"])
}

aws_cloudtrail = filter tfplan.resource_changes as _, resource_changes {
    resource_changes.type is "aws_cloudtrail" and
        resource_changes.mode is "managed" and
        (resource_changes.change.actions contains "create" or
            resource_changes.change.actions is ["update"])
}


aws_cloudtrail_enabled_logging_3_1_1 = rule{
    all aws_cloudtrail as _, aws_cloudtrail {
        aws_cloudtrail.change.after.enable_logging is true
    }
}
aws_cloudtrail_enabled_logging_3_1_2 = rule{
    all aws_cloudtrail as _, aws_cloudtrail {
        aws_cloudtrail.change.after.is_multi_region_trail is true
    }
}

aws_cloudtrail_enabled_logging_3_1_3 = rule{
    all aws_cloudtrail as _, aws_cloudtrail {        
        aws_cloudtrail.change.after.event_selector[0].include_management_events is true
        
    }
}

aws_cloudtrail_enabled_logging_3_1_4 = rule{
    all aws_cloudtrail as _, aws_cloudtrail {     
        aws_cloudtrail.change.after.event_selector[0].read_write_type is "All"
    }
}

main = rule { (aws_cloudtrail_enabled_logging_3_1_1 and aws_cloudtrail_enabled_logging_3_1_2 and aws_cloudtrail_enabled_logging_3_1_3 and aws_cloudtrail_enabled_logging_3_1_4) else false }